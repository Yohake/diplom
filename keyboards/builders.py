from aiogram.utils.keyboard import InlineKeyboardBuilder, InlineKeyboardMarkup, InlineKeyboardButton
from keyboards.buttons import (
    about_button, avito_button, drom_button, autoru_button, author_button,
    back_button, brand_button, region_button, city_button, 
    radius_button, navigation_button, next_ad_button, search_action_button,
    export_csv_button, export_json_button, select_compare_button,
    start_search_button, back_to_platforms_button, my_searches_button,
    manage_notifications_button, export_button, import_button
)
from schemas.callbacks import (
    SearchPaginationCallback,
    DeleteCallback,
    ToggleCallback,
    ExportCallback
)
from services.search_service import get_user_searches
from typing import List 
import logging


logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def main_menu_keyboard():
    builder = InlineKeyboardBuilder()
    builder.row(about_button)
    builder.row(avito_button, drom_button, autoru_button)
    builder.row(author_button)
    builder.row(my_searches_button, manage_notifications_button)
    return builder.as_markup()

def export_import_keyboard():
    builder = InlineKeyboardBuilder()
    builder.row(export_button, import_button)
    builder.row(back_button)
    return builder.as_markup()

def about_keyboard():
    builder = InlineKeyboardBuilder()
    builder.add(back_button)
    return builder.as_markup()

def back_to_menu():
    builder = InlineKeyboardBuilder()
    builder.add(back_button)
    return builder.as_markup()

def platform_choice_keyboard(platform: str):
    try:
        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(
            text="üîç –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫", 
            callback_data=f"start_{platform}_search"
        ))
        builder.add(back_to_platforms_button)
        builder.adjust(1)
        return builder.as_markup()
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ platform_choice_keyboard: {e}")
        return None  

def back_to_menu_keyboard():
    builder = InlineKeyboardBuilder()
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")  
    return builder.as_markup()

def get_brands_keyboard(brands: list, page: int = 0, total_pages: int = 1) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–∞—Ä–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    builder = InlineKeyboardBuilder()
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –±—Ä–µ–Ω–¥—ã –∏ —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
    for brand in sorted(brands):
        builder.add(InlineKeyboardButton(
            text=brand, 
            callback_data=f"brand_{brand.lower().replace(' ', '_')}"
        ))
    
    # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    if total_pages > 1:
        if page > 0:
            builder.add(InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                callback_data=f"page_{page-1}"
            ))
        
        builder.add(InlineKeyboardButton(
            text=f"{page+1}/{total_pages}",
            callback_data="no_action"
        ))
        
        if page < total_pages - 1:
            builder.add(InlineKeyboardButton(
                text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è",
                callback_data=f"page_{page+1}"
            ))
    
    builder.add(back_button)
    builder.adjust(2, repeat=True)
    return builder.as_markup()

def regions_keyboard():
    builder = InlineKeyboardBuilder()
    regions = ["–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–ö–∞–∑–∞–Ω—å", "–î—Ä—É–≥–æ–π"]
    for region in regions:
        builder.add(region_button(region))
    builder.add(back_button)
    builder.adjust(2)
    return builder.as_markup()

def radius_keyboard():
    builder = InlineKeyboardBuilder()
    radii = [("–¢–æ–ª—å–∫–æ –≥–æ—Ä–æ–¥", 0), ("+50 –∫–º", 50), ("+100 –∫–º", 100), ("+200 –∫–º", 200)]
    for text, radius in radii:
        builder.add(radius_button(text, radius))
    builder.add(back_button)
    builder.adjust(2)
    return builder.as_markup()

def next_ad_keyboard(index: int):
    builder = InlineKeyboardBuilder()
    builder.add(next_ad_button(index))
    builder.add(back_button)
    return builder.as_markup()

def cities_keyboard(cities: list, page: int = 0, per_page: int = 10) -> InlineKeyboardMarkup:
    start = page * per_page
    end = start + per_page
    builder = InlineKeyboardBuilder()
    
    for city in cities[start:end]:
        builder.add(city_button(city["name"], city['id']))
    
    builder.adjust(2)
    
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"cities_page_{page - 1}"))
    if end < len(cities):
        nav_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è –î–∞–ª–µ–µ", callback_data=f"cities_page_{page + 1}"))
    
    if nav_buttons:
        builder.row(*nav_buttons)
    
    builder.row(back_button)
    
    return builder.as_markup()

def create_search_keyboard(search, current_page, total_pages):
    builder = InlineKeyboardBuilder()
    
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∏—Å–∫–æ–º
    builder.row(
        InlineKeyboardButton(
            text="‚ùå –£–¥–∞–ª–∏—Ç—å",
            callback_data=DeleteCallback(search_id=search['id']).pack()
        ),
        InlineKeyboardButton(
            text="üîï –û—Ç–∫–ª—é—á–∏—Ç—å" if search['notifications'] else "üîî –í–∫–ª—é—á–∏—Ç—å",
            callback_data=ToggleCallback(search_id=search['id']).pack()
        )
    )
    
    # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    if current_page > 0:
        builder.add(
            InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                callback_data=SearchPaginationCallback(page=current_page - 1).pack()
            )
        )
    if current_page < total_pages - 0:
        builder.add(
            InlineKeyboardButton(
                text="–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è",
                callback_data=SearchPaginationCallback(page=current_page + 1).pack()
            )
        )
    
    # –ö–Ω–æ–ø–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞/–∏–º–ø–æ—Ä—Ç–∞
    builder.row(
        InlineKeyboardButton(text="üì§ –≠–∫—Å–ø–æ—Ä—Ç", callback_data=ExportCallback(action="export").pack()),
        InlineKeyboardButton(text="üì• –ò–º–ø–æ—Ä—Ç", callback_data=ExportCallback(action="import").pack())
    )
    
    return builder.as_markup()


def searches_list_keyboard(searches: dict) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –≤—Å–µ—Ö –ø–æ–∏—Å–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    builder = InlineKeyboardBuilder()
    
    for platform, platform_searches in searches.items():
        for search in platform_searches:
            params = search.get('params', {})
            brand = params.get('brand', '‚Äî')
            region = params.get('region', '‚Äî')
            text = f"{brand} ({region})"

            builder.add(InlineKeyboardButton(
                text=text,
                callback_data=f"view_search:{search['id']}"
            ))
    
    builder.row(export_button, import_button)
    builder.row(back_button)
    builder.adjust(1)
    return builder.as_markup()

def search_actions_keyboard(search_id: str) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        search_action_button(search_id, "view"),
        search_action_button(search_id, "toggle")
    )
    builder.row(
        search_action_button(search_id, "export"),
        search_action_button(search_id, "compare_prices_by_model")
    )
    builder.row(
        search_action_button(search_id, "delete"),
        back_to_menu_keyboard()
    )
    
    builder.adjust(2)
    return builder.as_markup()

def build_results_keyboard(
    search_id: str, 
    current_index: int, 
    total_results: int
) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    if current_index > 0:
        nav_buttons.append(InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data=f"prev_result:{search_id}:{current_index-1}"
        ))
    
    nav_buttons.append(InlineKeyboardButton(
        text=f"{current_index+1}/{total_results}",
        callback_data="no_action"
    ))
    
    if current_index < total_results - 1:
        nav_buttons.append(InlineKeyboardButton(
            text="‚û°Ô∏è –í–ø–µ—Ä–µ–¥",
            callback_data=f"next_result:{search_id}:{current_index+1}"
        ))
    
    builder.row(*nav_buttons)

    # –ö–Ω–æ–ø–∫–∞ "üîô –ù–∞–∑–∞–¥"
    builder.row(InlineKeyboardButton(
        text="üîô –ù–∞–∑–∞–¥",
        callback_data="my_searches"
    ))

    return builder.as_markup()


def build_comparison_keyboard(search_id: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–æ–∏—Å–∫–æ–≤"""
    builder = InlineKeyboardBuilder()
    
    builder.add(InlineKeyboardButton(
        text="–í—ã–±—Ä–∞—Ç—å –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è",
        callback_data=f"select_compare:{search_id}"
    ))
    builder.add(InlineKeyboardButton(
        text="–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–æ–∏–º –ø–æ–∏—Å–∫–∞–º",  # –ò–∑–º–µ–Ω–∏–ª–∏ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
        callback_data=f"my_searches:{search_id}"  # –û–±–Ω–æ–≤–∏–ª–∏ callback_data
    ))
    
    return builder.as_markup()


def build_export_options_keyboard(search_id: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(text="JSON", callback_data=f"export_json:{search_id}"),
        InlineKeyboardButton(text="CSV", callback_data=f"export_csv:{search_id}"),
        InlineKeyboardButton(text="Excel", callback_data=f"export_excel:{search_id}")
    )
    builder.row(
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="my_searches")
    )
    
    return builder.as_markup()

def compare_selection_keyboard(search_id: str) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
    builder = InlineKeyboardBuilder()
    
    builder.add(select_compare_button)
    builder.add(back_button)
    
    return builder.as_markup()

def export_options_keyboard(search_id: str) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞"""
    builder = InlineKeyboardBuilder()
    
    builder.row(export_json_button, export_csv_button)
    builder.row(back_button)
    
    return builder.as_markup()

def build_main_searches_keyboard(user_id: int) -> InlineKeyboardMarkup:
    """–û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ '–ú–æ–∏ –ø–æ–∏—Å–∫–∏'"""
    searches = get_user_searches(user_id)
    builder = InlineKeyboardBuilder()
    
    if not searches:
        builder.add(back_button)
        return builder.as_markup()
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–∏—Å–∫–∞
    for platform, platform_searches in searches.items():
        for search in platform_searches:
            params = search.get('params', {})
            brand = params.get('brand', '‚Äî')
            region = params.get('region', '‚Äî')
            text = f"{brand} ({region})"

            builder.add(InlineKeyboardButton(
                text=text,
                callback_data=f"view_search:{search['id']}"
            ))

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    builder.row(back_button)
    
    builder.adjust(1)
    return builder.as_markup()

def build_search_details_keyboard(search_id: str) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(text="üîç –ü–æ–∫–∞–∑–∞—Ç—å", callback_data=f"show_results:{search_id}"),
        InlineKeyboardButton(text="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data=f"toggle_notify:{search_id}")
    )
    builder.row(
        InlineKeyboardButton(text="üì§ –≠–∫—Å–ø–æ—Ä—Ç", callback_data=f"export_search:{search_id}"),
        InlineKeyboardButton(text="üîÑ –°—Ä–∞–≤–Ω–∏—Ç—å", callback_data=f"compare_by_model:{search_id}")
    )
    builder.row(
        InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_search:{search_id}"),
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="my_searches")
    )
    
    builder.adjust(2)
    return builder.as_markup()

def compare_by_model_keyboard() -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–æ –º–æ–¥–µ–ª–∏.
    """
    builder = InlineKeyboardBuilder()
    builder.add(
        InlineKeyboardButton(text="üîÑ –°—Ä–∞–≤–Ω–∏—Ç—å –ø–æ –º–æ–¥–µ–ª–∏", callback_data="compare_by_model"),
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")
    )
    builder.adjust(1)
    return builder.as_markup()


def models_keyboard(models: List[str]) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –º–æ–¥–µ–ª—è–º–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π"""
    builder = InlineKeyboardBuilder()
    
    for model in sorted(models):
        builder.add(InlineKeyboardButton(
            text=model,
            callback_data=f"select_model:{model}"
        ))
    
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")
    builder.adjust(2)
    return builder.as_markup()


def platforms_keyboard(platforms: list, brand: str, model: str) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã (–¥–ª—è –ø–æ–∫–∞–∑–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ).
    """
    builder = InlineKeyboardBuilder()
    for platform in platforms:
        builder.add(InlineKeyboardButton(
            text=f"üîç {platform}",
            callback_data=f"show_ads:{brand}:{model}:{platform}"
        ))
    builder.add(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="compare_by_model"))
    builder.adjust(2)
    return builder.as_markup()
