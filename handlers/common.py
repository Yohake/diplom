import json
from pathlib import Path
from datetime import datetime, timedelta
import asyncio
import logging
from aiogram import Router, types, F, Bot
from models.states import CompareState
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from config.settings import settings
from aiogram.filters import StateFilter
from services.search_service import clean_price
from aiogram.types import CallbackQuery, Message
from keyboards.builders import (
    main_menu_keyboard, about_keyboard, back_to_menu,
    platform_choice_keyboard, export_import_keyboard,
    back_to_menu_keyboard, create_search_keyboard,
    build_comparison_keyboard, build_export_options_keyboard,
    build_results_keyboard, build_main_searches_keyboard,
    build_search_details_keyboard, back_button,
    get_brands_keyboard, models_keyboard, platforms_keyboard
)
from schemas.callbacks import (
    SearchPaginationCallback,
    DeleteCallback,
    ToggleCallback,
    ExportCallback
)
from aiogram.utils.keyboard import InlineKeyboardBuilder, InlineKeyboardButton
from services.search_service import (
    get_user_searches, 
    delete_search_by_id as remove_search_by_id,
    toggle_notifications, 
    load_searches,
    import_user_searches,
    cleanup_old_searches, 
    get_search_info,
    delete_search_by_id,
    get_search_results,
    get_ads_by_model,
    get_unique_brands_and_models,
    compare_prices_by_model
)

from services.export_service import export_user_searches  
from models.states import ParserState

import aiofiles

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

router = Router()

def save_chat_id(chat_id: int):
    storage_path = Path("storage")
    storage_path.mkdir(exist_ok=True)

    chat_ids_file = storage_path / "chat_ids.json"

    try:
        if chat_ids_file.exists():
            with open(chat_ids_file, 'r') as f:
                chat_ids = json.load(f)
        else:
            chat_ids = []
    except (json.JSONDecodeError, Exception):
        chat_ids = []

    if chat_id not in chat_ids:
        chat_ids.append(chat_id)
        with open(chat_ids_file, 'w') as f:
            json.dump(chat_ids, f, indent=4)

@router.message(Command("admin_stats"))
async def admin_stats(message: types.Message):
    if message.from_user.id not in settings.ADMIN_IDS:
        return

    searches = load_searches()
    total_users = len(searches)
    active_searches = sum(len(platform_searches) for user in searches.values() for platform_searches in user.values())
    inactive_searches = cleanup_old_searches(days=30)  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–∏—Å—Ç–∏–º —Å—Ç–∞—Ä—ã–µ –ø–æ–∏—Å–∫–∏

    await message.answer(
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
        f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"üîç –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤: {active_searches}\n"
        f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: {inactive_searches}\n"
        f"‚è≥ –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M')}"
    )

@router.message(Command("admin_broadcast"))
async def admin_broadcast(message: types.Message, bot: Bot):
    if message.from_user.id not in settings.ADMIN_IDS:
        return

    if not message.reply_to_message:
        await message.answer("–û—Ç–≤–µ—Ç—å—Ç–µ —ç—Ç–∏–º –∫–æ–º–∞–Ω–¥–æ–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
        return

    searches = load_searches()
    users = list(searches.keys())
    success = 0
    failed = 0

    await message.answer(f"–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")

    for user_id in users:
        try:
            await bot.copy_message(
                chat_id=user_id,
                from_chat_id=message.chat.id,
                message_id=message.reply_to_message.message_id
            )
            success += 1
        except Exception as e:
            failed += 1
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è {user_id}: {e}")
        await asyncio.sleep(0.1)

    await message.answer(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n"
        f"–£—Å–ø–µ—à–Ω–æ: {success}\n"
        f"–ù–µ —É–¥–∞–ª–æ—Å—å: {failed}"
    )

@router.message(Command("start"))
async def cmd_start(message: types.Message):
    save_chat_id(message.chat.id)
    await message.answer(
        "üöó <b>AutoParserBot - –ø–æ–∏—Å–∫ –∞–≤—Ç–æ–æ–±—ä—è–≤–ª–µ–Ω–∏–π</b>\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu_keyboard(),
        parse_mode=settings.PARSE_MODE
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
@router.callback_query(F.data.startswith("prev_result:"))
async def prev_result_handler(callback: types.CallbackQuery):
    try:
        _, search_id, index = callback.data.split(":")
        index = int(index)
        results = get_search_results(callback.from_user.id, search_id)
        
        if index >= 0 and index < len(results):
            await show_advertisement(callback, results[index], search_id, index, len(results))
        else:
            await callback.answer("–≠—Ç–æ –ø–µ—Ä–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", show_alert=True)
    except Exception as e:
        logger.error(f"Error in prev_result_handler: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–í–ø–µ—Ä–µ–¥" –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
@router.callback_query(F.data.startswith("next_result:"))
async def next_result_handler(callback: types.CallbackQuery):
    try:
        _, search_id, index = callback.data.split(":")
        index = int(index)
        results = get_search_results(callback.from_user.id, search_id)
        
        if index < len(results):
            await show_advertisement(callback, results[index], search_id, index, len(results))
        else:
            await callback.answer("–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", show_alert=True)
    except Exception as e:
        logger.error(f"Error in next_result_handler: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "my_searches")
async def my_searches_callback(callback: types.CallbackQuery):
    try:
        user_id = callback.from_user.id
        keyboard = build_main_searches_keyboard(user_id)  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await callback.message.edit_text(
            "üîç <b>–ú–æ–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–∏</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∏—Å–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
            reply_markup=keyboard,
            parse_mode=settings.PARSE_MODE  # –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ settings.PARSE_MODE –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–¥–∞–Ω
        )
        
        await callback.answer()  # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    except Exception as e:
        logger.error(f"Error in my_searches_callback: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("view_search:"))
async def view_search_handler(callback: types.CallbackQuery):
    search_id = callback.data.split(":")[1]
    keyboard = build_search_details_keyboard(search_id)

    search = get_search_info(callback.from_user.id, search_id)
    if not search:
        await callback.answer("–ü–æ–∏—Å–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    params = search['params']
    platform = params.get('platform', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')  # –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞
    await callback.message.edit_text(
        f"üè∑Ô∏è <b>–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:</b> {platform}\n"
        f"üèéÔ∏è <b>–ú–∞—Ä–∫–∞:</b> {params.get('brand', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üìç <b>–†–µ–≥–∏–æ–Ω:</b> {params.get('region', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üí∞ <b>–¶–µ–Ω–∞:</b> {params.get('min_price', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')} - {params.get('max_price', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
        f"üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b> {'–í–∫–ª' if search['notifications'] else '–í—ã–∫–ª'}\n"
        f"üìÖ <b>–°–æ–∑–¥–∞–Ω:</b> {datetime.fromisoformat(search['created_at']).strftime('%d.%m.%Y')}",
        reply_markup=keyboard,
        parse_mode=settings.PARSE_MODE
    )
    await callback.answer()

@router.callback_query(F.data.startswith("show_results:"))
async def show_results_handler(callback: types.CallbackQuery, state: FSMContext):
    try:
        search_id = callback.data.split(":")[1]
        results = get_search_results(callback.from_user.id, search_id)
        
        if not results:
            await callback.answer("–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è", show_alert=True)
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
        await show_advertisement(callback, results[0], search_id, 0, len(results))
        
    except Exception as e:
        logger.error(f"Error in show_results_handler: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–≠–∫—Å–ø–æ—Ä—Ç"
@router.callback_query(F.data.startswith("export_search:"))
async def export_search_handler(callback: types.CallbackQuery):
    search_id = callback.data.split(":")[1]
    keyboard = build_export_options_keyboard(search_id)
    
    await callback.message.edit_text(
        "üì§ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞:",
        reply_markup=keyboard
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å"
@router.callback_query(F.data.startswith("delete_search:"))
async def delete_search_handler(callback: types.CallbackQuery):
    try:
        search_id = callback.data.split(":")[1]
        if delete_search_by_id(callback.from_user.id, search_id):
            await callback.answer("–ü–æ–∏—Å–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω", show_alert=False)
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –ø–æ–∏—Å–∫–æ–≤
            await my_searches_callback(callback)
        else:
            await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–∏—Å–∫", show_alert=True)
    except Exception as e:
        logger.error(f"Error in delete_search_handler: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
async def show_advertisement(
    callback: types.CallbackQuery,
    ad: dict,
    search_id: str,
    current_index: int,
    total_results: int
):
    keyboard = build_results_keyboard(search_id, current_index, total_results)
    
    text = (
        f"üöó <b>{ad.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}</b>\n"
        f"üí∞ –¶–µ–Ω–∞: {ad.get('price', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
        f"üìç –ê–¥—Ä–µ—Å: {ad.get('address', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üìÖ –î–∞—Ç–∞: {ad.get('date', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
        f"üîó <a href='{ad.get('url', '#')}'>–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ</a>"
    )
    
    await callback.message.edit_text(
        text,
        reply_markup=keyboard,
        parse_mode="HTML",
        disable_web_page_preview=True
    )

@router.callback_query(SearchPaginationCallback.filter())
async def paginate_searches_callback(callback: types.CallbackQuery, callback_data: SearchPaginationCallback):
    user_id = str(callback.from_user.id)
    data = get_user_searches(user_id)

    all_searches = []
    for platform, searches in data.items():
        for search in searches:
            all_searches.append((platform, search))

    if not all_searches:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤.", show_alert=True)
        return

    page = callback_data.page
    page = max(0, min(page, len(all_searches) - 1))  # –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É

    platform, search = all_searches[page]
    params = search['params']
    last_check = search.get('last_check', '–ù–∏–∫–æ–≥–¥–∞')

    keyboard = create_search_keyboard(search, current_page=page, total_pages=len(all_searches))

    text = (
        f"üìë <b>–í–∞—à–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–∏:</b>\n\n"
        f"<b>{platform.upper()}</b>\n"
        f"üöó –ú–∞—Ä–∫–∞: {params['brand']}\n"
        f"üìç –†–µ–≥–∏–æ–Ω: {params['region']}\n"
        f"üí∞ –¶–µ–Ω–∞: {params['min_price']} - {params['max_price']}\n"
        f"‚è≥ –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {last_check}"
    )

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º –ø–æ–∏—Å–∫–æ–º
    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()

@router.callback_query(DeleteCallback.filter())
async def delete_search_handler(
    callback: types.CallbackQuery,
    callback_data: DeleteCallback
):
    try:
        user_id = str(callback.from_user.id)
        search_id = callback_data.search_id

        # –£–¥–∞–ª—è–µ–º –ø–æ–∏—Å–∫ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        remove_search_by_id(user_id, search_id)

        # –£—Å–ø–µ—à–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        await callback.answer("–ü–æ–∏—Å–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!", show_alert=False)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–∏—Å–∫–æ–≤ (–µ—Å–ª–∏ –æ–Ω —Å–µ–π—á–∞—Å –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è)
        await my_searches_callback(callback)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞: {str(e)}", exc_info=True)
        await callback.answer(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞",
            show_alert=True
        )
        
@router.callback_query(F.data == "manage_notifications")
async def manage_notifications_handler(callback: types.CallbackQuery):
    try:
        # Get user_id from callback
        user_id = str(callback.from_user.id)
        
        # Get all searches for this user
        user_searches = get_user_searches(user_id)
        
        if not user_searches:
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤.", show_alert=True)
            return

        # Create a keyboard to show all searches with toggle buttons
        builder = InlineKeyboardBuilder()
        
        for platform, searches in user_searches.items():
            for search in searches:
                search_id = search['id']
                status = "üîî" if search.get('notifications', True) else "üîï"
                builder.add(InlineKeyboardButton(
                    text=f"{status} {platform}: {search['params']['brand']}",
                    callback_data=f"toggle_{search_id}"
                ))
        
        builder.adjust(1)
        # Add back button using your existing keyboard builder function
        builder.row(InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data="back_to_menu"
        ))
        
        await callback.message.edit_text(
            "üîî <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∏—Å–∫ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:",
            reply_markup=builder.as_markup(),
            parse_mode=settings.PARSE_MODE
        )
        
    except Exception as e:
        logger.error(f"Error in manage_notifications: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
        
    except Exception as e:
        logger.error(f"Error in manage_notifications: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@router.callback_query(F.data.startswith("toggle_"))
async def handle_toggle_notification(callback: types.CallbackQuery):
    try:
        search_id = callback.data.split("_")[1]
        user_id = callback.from_user.id
        
        # Use the existing toggle_notifications function
        new_status = toggle_notifications(user_id, search_id)
        
        await callback.answer(
            f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {'–≤–∫–ª—é—á–µ–Ω—ã' if new_status else '–æ—Ç–∫–ª—é—á–µ–Ω—ã'}",
            show_alert=False
        )
        
        # Refresh the management interface
        await manage_notifications_handler(callback)
        
    except Exception as e:
        logger.error(f"Error toggling notification: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", show_alert=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
@router.callback_query(ToggleCallback.filter())
async def toggle_notification_handler(
    callback: types.CallbackQuery,
    callback_data: ToggleCallback
):
    try:
        user_id = callback.from_user.id  # Get user_id from callback
        search_id = callback_data.search_id  # Get search_id from callback_data

        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –ø–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
        new_status = toggle_notifications(user_id, search_id)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
        keyboard = callback.message.reply_markup
        for row in keyboard.inline_keyboard:
            for button in row:
                if button.callback_data == callback.data:
                    button.text = "üîï –û—Ç–∫–ª—é—á–∏—Ç—å" if new_status else "üîî –í–∫–ª—é—á–∏—Ç—å"

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.edit_reply_markup(reply_markup=keyboard)

        # –ö—Ä–∞—Ç–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        notification_text = (
            "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã"
            if new_status
            else "üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã"
        )
        await callback.answer(notification_text, show_alert=False)

    except Exception as e:
        logger.error(f"Error toggling notifications: {str(e)}", exc_info=True)
        await callback.answer(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
            show_alert=True
        )

@router.callback_query(ExportCallback.filter())
async def handle_export_import(callback: types.CallbackQuery, callback_data: ExportCallback, state: FSMContext):
    action = callback_data.action

    if action == "export":
        await state.set_state(ParserState.export_searches)
        await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ (–±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è):")
    elif action == "import":
        await state.set_state(ParserState.import_searches)
        await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–∞–π–ª —Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–º–∏ –ø–æ–∏—Å–∫–∞–º–∏:")

@router.message(F.text, StateFilter(ParserState.export_searches))
async def process_export_searches(message: types.Message, state: FSMContext):
    filename = message.text.strip()
    if not filename:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        return

    try:
        file_path = export_user_searches(message.from_user.id, filename)
        await message.answer_document(
            document=types.FSInputFile(file_path),
            caption="–í–∞—à–∏ –ø–æ–∏—Å–∫–∏ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã"
        )

    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {str(e)}")

    await state.clear()

@router.callback_query(F.data.startswith("export_json:"))
async def export_json_handler(callback: types.CallbackQuery):
    try:
        search_id = callback.data.split(":")[1]
        user_id = callback.from_user.id
        file_path = export_user_searches(user_id, f"search_{search_id}", format="json")
        
        await callback.message.answer_document(
            document=types.FSInputFile(file_path),
            caption="–í–∞—à–∏ –ø–æ–∏—Å–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ JSON"
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"Error in export_json_handler: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –≤ JSON", show_alert=True)

@router.callback_query(F.data.startswith("export_csv:"))
async def export_csv_handler(callback: types.CallbackQuery):
    try:
        search_id = callback.data.split(":")[1]
        user_id = callback.from_user.id
        file_path = export_user_searches(user_id, f"search_{search_id}", format="csv")
        
        await callback.message.answer_document(
            document=types.FSInputFile(file_path),
            caption="–í–∞—à–∏ –ø–æ–∏—Å–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ CSV"
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"Error in export_csv_handler: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –≤ CSV", show_alert=True)

@router.callback_query(F.data.startswith("export_excel:"))
async def export_excel_handler(callback: types.CallbackQuery):
    try:
        search_id = callback.data.split(":")[1]
        user_id = callback.from_user.id
        file_path = export_user_searches(user_id, f"search_{search_id}", format="xlsx", search_id=search_id)

        await callback.message.answer_document(
            document=types.FSInputFile(file_path),
            caption="–í–∞—à–∏ –ø–æ–∏—Å–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ Excel (XLSX)"
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"Error in export_excel_handler: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –≤ Excel", show_alert=True)


@router.message(F.document, StateFilter(ParserState.import_searches))
async def process_import_searches(message: types.Message, state: FSMContext, bot: Bot):
    try:
        file = await bot.download(
            message.document,
            destination=f"storage/temp_{message.from_user.id}.json"
        )

        async with aiofiles.open(file, mode='r') as f:
            content = await f.read()
            searches = json.loads(content)

        import_user_searches(message.from_user.id, searches)
        await message.answer("–í–∞—à–∏ –ø–æ–∏—Å–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ: {str(e)}")
    finally:
        file.unlink(missing_ok=True)
        await state.clear()

# @router.callback_query(F.data == "about")
#async def about_bot(callback: types.CallbackQuery):
#        await callback.message.edit_text("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã." if result else "üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã.")

@router.callback_query(F.data == "about")
async def about_bot(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "‚ÑπÔ∏è <b>–û –±–æ—Ç–µ:</b>\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –∏—Å–∫–∞—Ç—å —Å–≤–µ–∂–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ –ø—Ä–æ–¥–∞–∂–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –Ω–∞ Avito, Drom –∏ Auto.ru.\n\n"
        "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
        "- –ü–æ–∏—Å–∫ –ø–æ –º–∞—Ä–∫–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è\n"
        "- –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ü–µ–Ω–µ –∏ —Ä–µ–≥–∏–æ–Ω—É\n"
        "- –ü–æ–∫–∞–∑ —Ç–æ–ª—å–∫–æ —Å–≤–µ–∂–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π (–¥–æ 24 —á–∞—Å–æ–≤)\n"
        "- –£–¥–æ–±–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\n\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–∏—Å–∫–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ù–∞–∑–∞–¥' –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–ª–æ—â–∞–¥–∫—É.",
        reply_markup=about_keyboard(),
        parse_mode=settings.PARSE_MODE
    )

@router.callback_query(F.data == "back_to_menu")
async def back_to_menu_handler(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await callback.message.edit_text(
        "üöó <b>AutoParserBot - –ø–æ–∏—Å–∫ –∞–≤—Ç–æ–æ–±—ä—è–≤–ª–µ–Ω–∏–π</b>\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu_keyboard(),
        parse_mode=settings.PARSE_MODE
    )
    await callback.answer()


@router.callback_query(F.data == "author")
async def about_author(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "üë®‚Äçüíª <b>–ê–≤—Ç–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞:</b>\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –±–æ—Ç–∞, "
        "–ø–∏—à–∏—Ç–µ –º–Ω–µ: <a href='https://t.me/yohake'>–∞–≤—Ç–æ—Ä</a>\n\n"
        "–ë–æ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º:\n"
        "- Python 3.11\n"
        "- Aiogram 3.x\n"
        "- aiohttp\n"
        "- BeautifulSoup",
        reply_markup=back_to_menu_keyboard(),
        parse_mode=settings.PARSE_MODE,
        disable_web_page_preview=True
    )

@router.callback_query(F.data == "avito_search")
async def start_avito_search(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "üõí <b>–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–∏—Å–∫ –Ω–∞ Avito</b>\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>üîç –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫</b>, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –≤—ã–±–æ—Ä—É –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.\n"
        "–ò–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ –≤—ã–±–æ—Ä—É –ø–ª–æ—â–∞–¥–∫–∏, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏.",
        reply_markup=platform_choice_keyboard("avito"),
        parse_mode=settings.PARSE_MODE
    )

@router.callback_query(F.data == "drom_search")
async def start_drom_search(callback: types.CallbackQuery):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –Ω–∞—á–∞–ª –ø–æ–∏—Å–∫ –Ω–∞ Drom")
    try:
        await callback.message.edit_text(
            "üöó <b>–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–∏—Å–∫ –Ω–∞ Drom</b>\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>üîç –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫</b>, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –≤—ã–±–æ—Ä—É –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.\n"
            "–ò–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ –≤—ã–±–æ—Ä—É –ø–ª–æ—â–∞–¥–∫–∏, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏.\n\n",
            reply_markup=platform_choice_keyboard("drom"),
            parse_mode=settings.PARSE_MODE
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–∏—Å–∫ –Ω–∞ Drom: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.callback_query(F.data == "autoru_search")
async def start_autoru_search(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "üöò <b>–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–∏—Å–∫ –Ω–∞ Auto.ru</b>\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>üîç –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫</b>, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –≤—ã–±–æ—Ä—É –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.\n"
        "–ò–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ –≤—ã–±–æ—Ä—É –ø–ª–æ—â–∞–¥–∫–∏, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏.\n\n",
        reply_markup=platform_choice_keyboard("autoru"),
        parse_mode=settings.PARSE_MODE
    )

@router.callback_query(F.data == "back_to_platforms")
async def back_to_platforms(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(
        "üöó <b>AutoParserBot - –ø–æ–∏—Å–∫ –∞–≤—Ç–æ–æ–±—ä—è–≤–ª–µ–Ω–∏–π</b>\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–æ—â–∞–¥–∫—É –¥–ª—è –ø–æ–∏—Å–∫–∞:",
        reply_markup=main_menu_keyboard(),
        parse_mode=settings.PARSE_MODE
    )


@router.callback_query(F.data.startswith("compare_by_model:"))
async def start_compare_by_model(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–æ –º–æ–¥–µ–ª–∏"""
    try:
        search_id = callback.data.split(":")[1]
        user_id = callback.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∏—Å–∫–µ
        search = get_search_info(user_id, search_id)
        if not search:
            await callback.answer("–ü–æ–∏—Å–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
            
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–∞—Ä–∫—É –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞
        brand = search['params'].get('brand')
        if not brand:
            await callback.answer("–ú–∞—Ä–∫–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞ –≤ –ø–æ–∏—Å–∫–µ", show_alert=True)
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–∞—Ä–∫–∏ –∏ –º–æ–¥–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        brands_models = get_unique_brands_and_models(user_id)
        
        if not brands_models:
            await callback.message.edit_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è",
                reply_markup=back_to_menu_keyboard()
            )
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–æ–¥–µ–ª–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–∞—Ä–∫–∏
        if brand not in brands_models or not brands_models[brand]:
            await callback.answer(f"–ù–µ—Ç –º–æ–¥–µ–ª–µ–π –¥–ª—è –º–∞—Ä–∫–∏ {brand}", show_alert=True)
            return
            
        await state.update_data({
            'brands_models': brands_models,
            'selected_brand': brand,
            'search_id': search_id
        })
        
        await callback.message.edit_text(
            f"\U0001F4CB –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –º–∞—Ä–∫–∏ {brand}:",
            reply_markup=models_keyboard(brands_models[brand])
        )
        await state.set_state(CompareState.CHOOSE_MODEL)
        await callback.answer()
    except Exception as e:
        logger.error(f"Error in start_compare_by_model: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@router.callback_query(F.data.startswith("select_brand:"), CompareState.CHOOSE_BRAND)
async def select_brand(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–∞—Ä–∫–∏"""
    brand = callback.data.split(":")[1]
    data = await state.get_data()
    models = data['brands_models'].get(brand, [])
    
    if not models:
        await callback.answer("–ù–µ—Ç –º–æ–¥–µ–ª–µ–π –¥–ª—è —ç—Ç–æ–π –º–∞—Ä–∫–∏")
        return
    
    builder = InlineKeyboardBuilder()
    for model in sorted(models):
        builder.add(InlineKeyboardButton(
            text=model,
            callback_data=f"select_model:{model}"
        ))
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")  
    builder.adjust(2)
    
    await callback.message.edit_text(
        f"üöó –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –º–∞—Ä–∫–∏ {brand}:",
        reply_markup=builder.as_markup()
    )
    await state.update_data(selected_brand=brand)
    await state.set_state(CompareState.CHOOSE_MODEL)

@router.callback_query(F.data.startswith("select_model:"), CompareState.CHOOSE_MODEL)
async def select_model(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ —Å –∫—Ä–∞—Å–∏–≤—ã–º —Ç–∞–±–ª–∏—á–Ω—ã–º –≤—ã–≤–æ–¥–æ–º"""
    try:
        model = callback.data.split(":")[1]
        data = await state.get_data()
        brand = data['selected_brand']
        
        comparison = compare_prices_by_model(
            user_id=callback.from_user.id,
            brand=brand,
            model=model
        )
        
        if not comparison or not comparison.get('platforms'):
            await callback.message.edit_text(
                f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–æ –º–æ–¥–µ–ª–∏ {brand} {model}",
                reply_markup=back_to_menu_keyboard()
            )
            return
        
        price_diff = comparison['max_price'] - comparison['min_price']

        # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –±–æ–ª—å—à–µ 0
        price_diff_percent = (price_diff / comparison['min_price']) * 100 if comparison['min_price'] > 0 else 0

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É
        table = [
            ["–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞", "–ú–∏–Ω. —Ü–µ–Ω–∞", "–°—Ä–µ–¥–Ω—è—è", "–ú–∞–∫—Å. —Ü–µ–Ω–∞", "–ö–æ–ª-–≤–æ"],
            ["-----------", "-----------", "---------", "------------", "--------"]
        ]

        for platform in comparison['platforms']:
            table.append([
                platform['platform'].upper(),
                f"{int(platform['min_price']):,} ‚ÇΩ",
                f"{int(platform['avg_price']):,} ‚ÇΩ",
                f"{int(platform['max_price']):,} ‚ÇΩ",
                str(platform['count'])
            ])

        # –í—ã—á–∏—Å–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —à–∏—Ä–∏–Ω—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞
        col_widths = [max(len(str(cell)) for cell in col) for col in zip(*table)]

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Ç–∞–±–ª–∏—Ü—ã —Å –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ–º
        formatted_table = "\n".join(
            " | ".join(f"{str(cell):<{col_widths[i]}}" for i, cell in enumerate(row))
            for row in table
        )

        # –¢–µ–ø–µ—Ä—å formatted_table –º–æ–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_text = (
            f"üöó <b>–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ü–µ–Ω –¥–ª—è {brand.capitalize()} {model.capitalize()}</b>\n\n"
            f"<pre>{formatted_table}</pre>\n\n"
            f"üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"‚Ä¢ –†–∞–∑–±—Ä–æ—Å —Ü–µ–Ω: {int(comparison['min_price']):,} - {int(comparison['max_price']):,} ‚ÇΩ\n"
            f"‚Ä¢ –†–∞–∑–Ω–∏—Ü–∞: {int(price_diff):,} ‚ÇΩ ({price_diff_percent:.1f}%)\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {comparison['total_ads']}"
        )

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
        builder = InlineKeyboardBuilder()
        for platform in comparison['platforms']:
            builder.add(InlineKeyboardButton(
                text=f"üîç {platform['platform'].upper()}",
                callback_data=f"show_ads:{brand}:{model}:{platform['platform']}"
            ))
        
        builder.add(InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –º–æ–¥–µ–ª—è–º",
            callback_data=f"compare_by_model:{data.get('search_id', '')}"
        ))
        builder.adjust(1)
        
        await callback.message.edit_text(
            message_text,
            reply_markup=builder.as_markup(),
            parse_mode=settings.PARSE_MODE
        )
        await state.set_state(CompareState.SHOW_RESULTS)
        
    except Exception as e:
        logger.error(f"Error in select_model: {e}", exc_info=True)
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ —Ü–µ–Ω",
            reply_markup=back_to_menu_keyboard()
        )

@router.callback_query(F.data.startswith("show_ads:"), CompareState.SHOW_RESULTS)
async def show_platform_ads(callback: CallbackQuery, state: FSMContext):
    """–ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∞–º–∏"""
    _, brand, model, platform = callback.data.split(":", 3)
    user_id = callback.from_user.id
    
    ads = get_ads_by_model(user_id, brand, model, platform)
    
    if not ads:
        await callback.answer("–ù–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è —ç—Ç–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã")
        return
    
    message_text = f"üöò <b>{brand.capitalize()} {model.capitalize()} –Ω–∞ {platform.upper()}</b>\n\n"
    
    for idx, ad in enumerate(ads[:5], 1):
        price = f"{int(clean_price(ad.get('price', '0'))):,} ‚ÇΩ" if ad.get('price') else "–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
        year = ad.get('year', '–≥.–≤. –Ω–µ —É–∫–∞–∑–∞–Ω')
        url = ad.get('url', '#')
        
        message_text += (
            f"{idx}. <b>{price}</b> - {year}\n"
            f"<a href='{url}'>üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ</a>\n\n"
        )
    
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é",
        callback_data=f"select_model:{model}"
    ))
    await state.set_state(CompareState.CHOOSE_MODEL)

    
    await callback.message.edit_text(
        message_text,
        reply_markup=builder.as_markup(),
        parse_mode=settings.PARSE_MODE,
        disable_web_page_preview=True
    )

@router.callback_query(F.data.startswith("compare:"))
async def compare_search_handler(callback: types.CallbackQuery):
    try:
        search_id = callback.data.split(":")[1]
        user_id = callback.from_user.id

        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (–ø—Ä–∏–º–µ—Ä–Ω–∞—è –ª–æ–≥–∏–∫–∞)
        comparison = compare_prices_by_model(user_id, search_id)
        if not comparison:
            await callback.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è.", show_alert=True)
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (–ø—Ä–∏–º–µ—Ä)
        text = "üîé –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ü–µ–Ω:\n\n"
        for item in comparison:
            text += (
                f"–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {item['platform']}\n"
                f"–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {item['avg_price']}\n"
                f"–û–±—ä—è–≤–ª–µ–Ω–∏–π: {item['count']}\n\n"
            )

        await callback.message.edit_text(
            text,
            reply_markup=back_to_menu_keyboard(),
            parse_mode=settings.PARSE_MODE
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"Error in compare_search_handler: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏", show_alert=True)

@router.callback_query(F.data.startswith("brands_page:"))
async def handle_brands_page(callback: CallbackQuery, state: FSMContext):
    page = int(callback.data.split(":")[1])
    data = await state.get_data()
    brands = data.get("brands", [])
    
    # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
    brands_per_page = 10  # –ù–∞–ø—Ä–∏–º–µ—Ä, 10 –±—Ä–µ–Ω–¥–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    total_pages = (len(brands) + brands_per_page - 1) // brands_per_page
    
    # –ü–æ–ª—É—á–∞–µ–º –±—Ä–µ–Ω–¥—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start = page * brands_per_page
    end = start + brands_per_page
    current_brands = brands[start:end]
    
    await callback.message.edit_reply_markup(
        reply_markup=get_brands_keyboard(current_brands, page, total_pages)
    )
    await callback.answer()